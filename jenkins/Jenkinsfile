pipeline {
    agent any
    parameters {
        string(name: 'REGISTRY', description: 'The name of the docker registry to push the image. (<registry>/name:version)')
        string(name: 'IMG_VERSION', description: 'The version of the docker image to build. (registry/name:<version>)')
    }
    environment {
        DIR_NAME = 'app-devops-bootcamp/api-store'
        IMG_NAME = 'app-store-bootcamp'
        CONTAINER_NAME = 'app_store'
        REPO_URL = 'https://github.com/bartodes/app-devops-bootcamp'
        REPO_DIR = 'app-devops-bootcamp'
        NODE_NAME = 'nodejs:18.15.0' 
        DOCKER_CRED_ID = 'docker_creds'
        K8_REPO = 'https://github.com/bartodes/kubernetes-devops-bootcamp.git'
        K8_DIR = 'kubernetes-devops-bootcamp'
        GIT_CRED_ID = 'git_k8'
    }
    stages {
        stage('Clone') {
            steps {
                echo 'Cloning...'
                sh """
                git clone ${REPO_URL}
                """
            }
        }
        stage('Test') {
            steps {
                nodejs(nodeJSInstallationName: "${NODE_NAME}"){
                    echo 'Testing app for building stage...'
                    sh """
                    cd ${DIR_NAME}
                    npm install
                    npm run test
                    """
                }
            }
        }
        stage('Docker Build') {
            steps {
                echo "Building Docker Image..."
                sh """
                docker build -t ${params.REGISTRY}/${IMG_NAME}:${params.IMG_VERSION} ./${DIR_NAME}
                """
            }
        }
        stage('Docker Push') {
            steps {
                echo "Pushing Docker Image..."
                withCredentials([
                    usernamePassword(credentialsId: "${DOCKER_CRED_ID}", usernameVariable: 'DOCKER_USR', passwordVariable: 'DOCKER_PSSWD')
                ]){
                    sh """
                    docker login -u ${DOCKER_USR} -p ${DOCKER_PSSWD}
                    docker push ${params.REGISTRY}/${IMG_NAME}:${params.IMG_VERSION}
                    """
                }
            }
        }
        stage('K8s Update & Push'){
            steps {
                echo "Cloning K8s Manifest..."
                sh"""
                git clone ${K8_REPO}
                """

                echo "Updating K8s Manifest..."
                sh"""
                cd ${K8_DIR}/base
                sed -i 's ${params.REGISTRY}/${IMG_NAME}:.* ${params.REGISTRY}/${IMG_NAME}:${params.IMG_VERSION} g' deployment.yaml
                """
                
                // echo "Pushing K8s Manifest..."
                // withCredentials([
                //     usernamePassword(credentialsId: "${GIT_CRED_ID}", usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')
                // ]){
                //     sh"""
                //     git add...
                //     git commit -m 'jenkins-${BUILD_ID}: updated the version of the image'
                //     git push...
                //     """
                // }
            }
        }
    }
    post {
        always {
            echo 'Deleting working files...'
            sh"""
            rm -rf ${REPO_DIR} ${K8_DIR}
            docker rmi -f ${IMG_NAME}:${params.IMG_VERSION}
            """
        }
    }
}