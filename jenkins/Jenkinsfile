pipeline {
    agent any
    parameters {
        string(name: 'REGISTRY', description: 'The name of the docker registry to push the image. (<registry>/name:version)')
        string(name: 'IMG_VERSION', description: 'The version of the docker image to build. (registry/name:<version>)')
        string(name: 'CREDS_ID', description: 'The ID of the credential. (in jenkins credential administrator)')
    }
    environment {
        DIR_NAME = 'app-devops-bootcamp/api-store'
        IMG_NAME = 'app-store-bootcamp'
        CONTAINER_NAME = 'app_store'
        REPO_URL = 'https://github.com/bartodes/app-devops-bootcamp'
        REPO_DIR = 'app-devops-bootcamp'
    }
    stages {
        stage('Clone') {
            steps {
                echo 'Cloning...'
                sh """
                git clone ${REPO_URL}
                """
            }
        }
        stage('Test') {
            steps {
                nodejs(nodeJSInstallationName: 'docker-test'){
                    echo 'Testing...'
                    sh """
                    cd ${DIR_NAME}
                    npm install
                    npm run test
                    """
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building... ID: ${BUILD_ID} URL: ${BUILD_URL}"
                sh """
                docker build -t ${params.REGISTRY}/${IMG_NAME}:${params.IMG_VERSION} ./${DIR_NAME}
                docker container rm -f ${CONTAINER_NAME}
                docker run -d -p 3000:3000 --name ${CONTAINER_NAME} ${params.REGISTRY}/${IMG_NAME}:${params.IMG_VERSION}
                """
            }
        }
        stage('Push') {
            steps {
                echo "Pushing Docker Image..."
                withCredentials([
                    usernamePassword(credentialsId: "${params.CREDS_ID}", usernameVariable: 'DOCKER_USR', passwordVariable: 'DOCKER_PSSWD')
                ]){
                    sh """
                    docker login -u ${DOCKER_USR} -p ${DOCKER_PSSWD}
                    docker push ${params.REGISTRY}/${IMG_NAME}:${params.IMG_VERSION}
                    """
                }
            }
        }
    }
    post{
        always{
            echo 'Deleting working files...'
            sh"""
            rm -rf ${REPO_DIR}
            docker rmi -f ${IMG_NAME}:${params.IMG_VERSION}
            docker container rm -f ${CONTAINER_NAME}
            """
        }
    }
}